"use strict";

exports.__esModule = true;
exports.useLogger = useLogger;

var React = _interopRequireWildcard(require("react"));

var _useUpdateEffect = require("./use-update-effect");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * React hook to console-log a value when it mounts
 * and as it updates.
 *
 * @param label a label for the component
 * @param values parameters to log
 */
function useLogger(label) {
  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }

  React.useEffect(function () {
    var _console;

    (_console = console).log.apply(_console, [label + " mounted:"].concat(values));

    return function () {
      console.log(label + " unmounted");
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _useUpdateEffect.useUpdateEffect)(function () {
    var _console2;

    (_console2 = console).log.apply(_console2, [label + " updated:"].concat(values));
  });
}
