"use strict";

exports.__esModule = true;
exports.usePopper = usePopper;

var React = _interopRequireWildcard(require("react"));

var _core = require("@popperjs/core");

var _popper = require("./popper.utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var isBrowser = typeof window !== "undefined";
var useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;

function usePopper(props) {
  var _props$placement = props.placement,
      initialPlacement = _props$placement === void 0 ? "bottom" : _props$placement,
      offsetProp = props.offset,
      _props$preventOverflo = props.preventOverflow,
      preventOverflow = _props$preventOverflo === void 0 ? true : _props$preventOverflo,
      _props$fixed = props.fixed,
      fixed = _props$fixed === void 0 ? false : _props$fixed,
      _props$forceUpdate = props.forceUpdate,
      forceUpdate = _props$forceUpdate === void 0 ? true : _props$forceUpdate,
      _props$flip = props.flip,
      flip = _props$flip === void 0 ? true : _props$flip,
      _props$arrowSize = props.arrowSize,
      arrowSize = _props$arrowSize === void 0 ? 10 : _props$arrowSize,
      arrowShadowColor = props.arrowShadowColor,
      _props$gutter = props.gutter,
      gutter = _props$gutter === void 0 ? arrowSize : _props$gutter,
      _props$eventsEnabled = props.eventsEnabled,
      eventsEnabled = _props$eventsEnabled === void 0 ? true : _props$eventsEnabled,
      modifiers = props.modifiers;
  var popper = React.useRef(null);
  var referenceRef = React.useRef(null);
  var popoverRef = React.useRef(null);
  var arrowRef = React.useRef(null);

  var _React$useState = React.useState(initialPlacement),
      originalPlacement = _React$useState[0],
      place = _React$useState[1];

  var _React$useState2 = React.useState(initialPlacement),
      placement = _React$useState2[0],
      setPlacement = _React$useState2[1];

  var _React$useState3 = React.useState(offsetProp || [0, gutter]),
      offset = _React$useState3[0];

  var _React$useState4 = React.useState({}),
      popoverStyles = _React$useState4[0],
      setPopoverStyles = _React$useState4[1];

  var _React$useState5 = React.useState({}),
      arrowStyles = _React$useState5[0],
      setArrowStyles = _React$useState5[1];

  var update = React.useCallback(function () {
    if (popper.current) {
      popper.current.forceUpdate();
      return true;
    }

    return false;
  }, []);
  var modifiersOverride = modifiers != null ? modifiers : [];
  useSafeLayoutEffect(function () {
    if (referenceRef.current && popoverRef.current) {
      popper.current = (0, _core.createPopper)(referenceRef.current, popoverRef.current, {
        placement: originalPlacement,
        strategy: fixed ? "fixed" : "absolute",
        modifiers: [{
          name: "eventListeners",
          enabled: eventsEnabled
        }, {
          name: "applyStyles",
          enabled: false
        }, {
          name: "flip",
          enabled: flip,
          options: {
            padding: 8
          }
        }, {
          name: "computeStyles",
          options: {
            gpuAcceleration: false,
            adaptive: false
          }
        }, {
          name: "offset",
          options: {
            offset: offset
          }
        }, {
          name: "preventOverflow",
          enabled: preventOverflow,
          options: {
            tetherOffset: function tetherOffset() {
              var _arrowRef$current;

              return ((_arrowRef$current = arrowRef.current) == null ? void 0 : _arrowRef$current.clientWidth) || 0;
            }
          }
        }, {
          name: "arrow",
          enabled: Boolean(arrowRef.current),
          options: {
            element: arrowRef.current
          }
        }, {
          name: "updateState",
          phase: "write",
          enabled: true,
          fn: function fn(_ref) {
            var state = _ref.state;
            setPlacement(state.placement);
            setPopoverStyles(state.styles.popper);
            setArrowStyles(state.styles.arrow);
          }
        }].concat(modifiersOverride)
      });
    }

    return function () {
      if (popper.current) {
        popper.current.destroy();
        popper.current = null;
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [originalPlacement, fixed, forceUpdate, flip, offset, preventOverflow, eventsEnabled]);
  useSafeLayoutEffect(function () {
    var id = requestAnimationFrame(function () {
      if (forceUpdate) {
        var _popper$current;

        (_popper$current = popper.current) == null ? void 0 : _popper$current.forceUpdate();
      }
    });
    return function () {
      cancelAnimationFrame(id);
    };
  }, [forceUpdate]);

  var computedArrowStyles = _extends({}, arrowStyles, (0, _popper.getArrowStyles)(placement, arrowSize, arrowShadowColor));

  return {
    popperInstance: popper.current,
    reference: {
      ref: referenceRef
    },
    popper: {
      ref: popoverRef,
      style: _extends({}, popoverStyles, {
        transformOrigin: (0, _popper.toTransformOrigin)(placement)
      })
    },
    arrow: {
      ref: arrowRef,
      style: computedArrowStyles
    },
    update: update,
    placement: placement,
    place: place
  };
}
