"use strict";

exports.__esModule = true;
exports.HiddenTransition = void 0;

var _utils = require("@chakra-ui/utils");

var React = _interopRequireWildcard(require("react"));

var _CSSTransition = _interopRequireDefault(require("react-transition-group/CSSTransition"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var HiddenTransition = function HiddenTransition(props) {
  var nodeRef = props.nodeRef,
      children = props.children,
      _onEnter = props.onEnter,
      _onExited = props.onExited,
      _onExit = props.onExit,
      _onExiting = props.onExiting,
      rest = _objectWithoutPropertiesLoose(props, ["nodeRef", "children", "onEnter", "onExited", "onExit", "onExiting"]);

  return /*#__PURE__*/React.createElement(_CSSTransition["default"], _extends({}, rest, {
    nodeRef: nodeRef,
    addEndListener: function addEndListener(done) {
      var _nodeRef$current;

      (_nodeRef$current = nodeRef.current) == null ? void 0 : _nodeRef$current.addEventListener("transitionend", done, false);
    },
    onEnter: function onEnter(isAppearing) {
      if (nodeRef.current) {
        nodeRef.current.hidden = false;
      }

      _onEnter == null ? void 0 : _onEnter(isAppearing);
    },
    onExited: function onExited() {
      if (nodeRef.current) {
        nodeRef.current.hidden = true;
        nodeRef.current.style.pointerEvents = "auto";
      }

      _onExited == null ? void 0 : _onExited();
    },
    onExit: function onExit() {
      if (nodeRef.current) {
        nodeRef.current.hidden = false;
      }

      _onExit == null ? void 0 : _onExit();
    },
    onExiting: function onExiting() {
      if (nodeRef.current) {
        nodeRef.current.style.pointerEvents = "none";
      }

      _onExiting == null ? void 0 : _onExiting();
    }
  }), children);
};

exports.HiddenTransition = HiddenTransition;

if (_utils.__DEV__) {
  HiddenTransition.displayName = "HiddenTransition";
}
