"use strict";

exports.__esModule = true;
exports.MenuDivider = exports.MenuIcon = exports.MenuCommand = exports.MenuGroup = exports.MenuOptionGroup = exports.MenuItemOption = exports.MenuItem = exports.MenuList = exports.MenuButton = exports.Menu = void 0;

var _system = require("@chakra-ui/system");

var _utils = require("@chakra-ui/utils");

var React = _interopRequireWildcard(require("react"));

var _useMenu = require("./use-menu");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Menu provides context, state, and focus management
 * to its sub-components. It doesn't render any DOM node.
 */
var Menu = function Menu(props) {
  var styles = (0, _system.useMultiStyleConfig)("Menu", props);
  var ownProps = (0, _system.omitThemingProps)(props);
  var ctx = (0, _useMenu.useMenu)(ownProps);
  var context = React.useMemo(function () {
    return ctx;
  }, [ctx]);
  return /*#__PURE__*/React.createElement(_useMenu.MenuProvider, {
    value: context
  }, /*#__PURE__*/React.createElement(_system.StylesProvider, {
    value: styles
  }, (0, _utils.runIfFn)(props.children, {
    isOpen: context.isOpen,
    onClose: context.onClose
  })));
};

exports.Menu = Menu;

if (_utils.__DEV__) {
  Menu.displayName = "Menu";
}

var StyledMenuButton = /*#__PURE__*/(0, _system.forwardRef)(function StyledMenuButton(props, ref) {
  var styles = (0, _system.useStyles)();
  return /*#__PURE__*/React.createElement(_system.chakra.button, _extends({
    ref: ref
  }, props, {
    __css: _extends({
      display: "inline-flex",
      appearance: "none",
      alignItems: "center",
      outline: 0,
      transition: "all 250ms"
    }, styles.button)
  }));
});
/**
 * The trigger for the menu list. Must be a direct child of `Menu`.
 */

var MenuButton = /*#__PURE__*/(0, _system.forwardRef)(function MenuButton(props, ref) {
  var children = props.children,
      Comp = props.as,
      otherProps = _objectWithoutPropertiesLoose(props, ["children", "as"]);

  var ownProps = (0, _useMenu.useMenuButton)(otherProps);
  var ownRef = (0, _utils.mergeRefs)(ref, ownProps.ref);
  var Wrapper = Comp || StyledMenuButton;
  return /*#__PURE__*/React.createElement(Wrapper, _extends({}, ownProps, {
    ref: ownRef
  }), /*#__PURE__*/React.createElement(_system.chakra.span, {
    __css: {
      pointerEvents: "none",
      flex: "1"
    }
  }, props.children));
});
exports.MenuButton = MenuButton;

if (_utils.__DEV__) {
  MenuButton.displayName = "MenuButton";
} //////////////////////////////////////////////////////////////////////////


var MenuList = /*#__PURE__*/(0, _system.forwardRef)(function MenuList(props, ref) {
  var menulist = (0, _useMenu.useMenuList)(props);
  var styles = (0, _system.useStyles)();
  return /*#__PURE__*/React.createElement(_system.chakra.div, _extends({}, menulist, {
    ref: (0, _utils.mergeRefs)(menulist.ref, ref),
    __css: _extends({
      outline: 0
    }, styles.list)
  }));
});
exports.MenuList = MenuList;

if (_utils.__DEV__) {
  MenuList.displayName = "MenuList";
} //////////////////////////////////////////////////////////////////////////


var StyledMenuItem = /*#__PURE__*/(0, _system.forwardRef)(function StyledMenuItem(props, ref) {
  var _props$type;

  var styles = (0, _system.useStyles)(); // given another component, use its type if present
  // else, use no type to avoid invalid html, e.g. <a type="button" />
  // else, fall back to "button"

  var type = props.as ? (_props$type = props.type) != null ? _props$type : undefined : "button";
  return /*#__PURE__*/React.createElement(_system.chakra.button, _extends({
    ref: ref,
    type: type
  }, props, {
    __css: _extends({
      textDecoration: "none",
      color: "inherit",
      userSelect: "none",
      display: "flex",
      width: "100%",
      alignItems: "center",
      textAlign: "left",
      flex: "0 0 auto",
      outline: 0
    }, styles.item)
  }));
});
var MenuItem = /*#__PURE__*/(0, _system.forwardRef)(function MenuItem(props, ref) {
  var icon = props.icon,
      _props$iconSpacing = props.iconSpacing,
      iconSpacing = _props$iconSpacing === void 0 ? "0.75rem" : _props$iconSpacing,
      command = props.command,
      children = props.children,
      otherProps = _objectWithoutPropertiesLoose(props, ["icon", "iconSpacing", "command", "children"]);

  var ownProps = (0, _useMenu.useMenuItem)(otherProps);
  var ownRef = (0, _utils.mergeRefs)(ownProps.ref, ref);
  var shouldWrap = icon || command;

  var _children = shouldWrap ? /*#__PURE__*/React.createElement(_system.chakra.span, {
    pointerEvents: "none",
    flex: "1"
  }, children) : children;

  return /*#__PURE__*/React.createElement(StyledMenuItem, _extends({}, ownProps, {
    ref: ownRef
  }), icon && /*#__PURE__*/React.createElement(MenuIcon, {
    fontSize: "0.8em",
    mr: iconSpacing,
    children: icon
  }), _children, command && /*#__PURE__*/React.createElement(MenuCommand, {
    children: command
  }));
});
exports.MenuItem = MenuItem;

if (_utils.__DEV__) {
  MenuItem.displayName = "MenuItem";
} //////////////////////////////////////////////////////////////////////////


var CheckIcon = function CheckIcon(props) {
  return /*#__PURE__*/React.createElement("svg", _extends({
    viewBox: "0 0 14 14",
    width: "1em",
    height: "1em"
  }, props), /*#__PURE__*/React.createElement("polygon", {
    fill: "currentColor",
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }));
};

var MenuItemOption = /*#__PURE__*/(0, _system.forwardRef)(function MenuItemOption(props, ref) {
  var icon = props.icon,
      _props$iconSpacing2 = props.iconSpacing,
      iconSpacing = _props$iconSpacing2 === void 0 ? "0.75rem" : _props$iconSpacing2,
      htmlProps = _objectWithoutPropertiesLoose(props, ["icon", "iconSpacing"]);

  var ownProps = (0, _useMenu.useMenuOption)(htmlProps);
  var ownRef = (0, _utils.mergeRefs)(ownProps.ref, ref);
  return /*#__PURE__*/React.createElement(StyledMenuItem, _extends({}, ownProps, {
    ref: ownRef
  }), /*#__PURE__*/React.createElement(MenuIcon, {
    fontSize: "0.8em",
    children: icon || /*#__PURE__*/React.createElement(CheckIcon, null),
    mr: iconSpacing,
    visibility: props.isChecked ? "visible" : "hidden"
  }), /*#__PURE__*/React.createElement(_system.chakra.span, {
    flex: "1"
  }, ownProps.children));
});
exports.MenuItemOption = MenuItemOption;

if (_utils.__DEV__) {
  MenuItemOption.displayName = "MenuItemOption";
} //////////////////////////////////////////////////////////////////////////


var MenuOptionGroup = function MenuOptionGroup(props) {
  var _useMenuOptionGroup = (0, _useMenu.useMenuOptionGroup)(props),
      children = _useMenuOptionGroup.children,
      rest = _objectWithoutPropertiesLoose(_useMenuOptionGroup, ["children"]);

  return /*#__PURE__*/React.createElement(MenuGroup, _extends({
    title: props.title,
    children: children
  }, rest));
};

exports.MenuOptionGroup = MenuOptionGroup;

if (_utils.__DEV__) {
  MenuOptionGroup.displayName = "MenuOptionGroup";
} //////////////////////////////////////////////////////////////////////////


var MenuGroup = function MenuGroup(props) {
  var title = props.title,
      children = props.children,
      className = props.className,
      rest = _objectWithoutPropertiesLoose(props, ["title", "children", "className"]);

  var _className = (0, _utils.cx)("chakra-menu__group__title", className);

  var styles = (0, _system.useStyles)();
  return /*#__PURE__*/React.createElement(_system.chakra.div, {
    className: "chakra-menu__group",
    role: "group"
  }, title && /*#__PURE__*/React.createElement(_system.chakra.p, _extends({
    className: _className
  }, rest, {
    __css: styles.groupTitle
  }), title), children);
};

exports.MenuGroup = MenuGroup;

if (_utils.__DEV__) {
  MenuGroup.displayName = "MenuGroup";
} //////////////////////////////////////////////////////////////////////////


var MenuCommand = function MenuCommand(props) {
  var styles = (0, _system.useStyles)();
  return /*#__PURE__*/React.createElement(_system.chakra.span, _extends({}, props, {
    __css: styles.command,
    className: "chakra-menu__command"
  }));
};

exports.MenuCommand = MenuCommand;

if (_utils.__DEV__) {
  MenuCommand.displayName = "MenuCommand";
} //////////////////////////////////////////////////////////////////////////


var MenuIcon = function MenuIcon(props) {
  var className = props.className,
      children = props.children,
      rest = _objectWithoutPropertiesLoose(props, ["className", "children"]);

  var child = React.Children.only(children);
  var clone = /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {
    focusable: "false",
    "aria-hidden": true,
    className: (0, _utils.cx)("chakra-menu__icon", child.props.className)
  }) : null;

  var _className = (0, _utils.cx)("chakra-menu__icon-wrapper", className);

  return /*#__PURE__*/React.createElement(_system.chakra.span, _extends({
    className: _className
  }, rest, {
    __css: {
      flexShrink: 0
    }
  }), clone);
};

exports.MenuIcon = MenuIcon;

if (_utils.__DEV__) {
  MenuIcon.displayName = "MenuIcon";
}

var MenuDivider = function MenuDivider(props) {
  var className = props.className,
      rest = _objectWithoutPropertiesLoose(props, ["className"]);

  var _className = (0, _utils.cx)("chakra-menu__divider", className);

  return /*#__PURE__*/React.createElement(_system.chakra.hr, _extends({
    role: "separator",
    "aria-orientation": "horizontal",
    className: _className
  }, rest, {
    __css: {
      border: 0,
      borderBottom: "1px solid",
      borderColor: "inherit",
      my: "0.5rem",
      opacity: 0.6
    }
  }));
};

exports.MenuDivider = MenuDivider;

if (_utils.__DEV__) {
  MenuDivider.displayName = "MenuDivider";
}
