"use strict";

exports.__esModule = true;
exports.useTransitionConfig = useTransitionConfig;
exports.useTransitions = exports.TransitionsProvider = void 0;

var _system = require("@chakra-ui/system");

var _utils = require("@chakra-ui/utils");

var React = _interopRequireWildcard(require("react"));

var _transitionConfig = require("./transition-config");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useTransitionConfig(themeKey, props, classNames) {
  var theme = (0, _system.useTheme)();
  var path = "components." + themeKey + ".transition";
  var defaultConfig = (0, _utils.get)(theme, path);
  var configObjectOrFn = props.transitionConfig || defaultConfig;
  var config = (0, _utils.runIfFn)(configObjectOrFn, props);
  var partsTransitionRef = React.useRef({});
  return React.useMemo(function () {
    if (config) {
      var partsTransition = {};

      for (var _part in config) {
        var _classNames$_part;

        var _config$_part$timeout = config[_part].timeout,
            timeout = _config$_part$timeout === void 0 ? 0 : _config$_part$timeout;
        var className = (_classNames$_part = classNames == null ? void 0 : classNames[_part]) != null ? _classNames$_part : themeKey.toLowerCase();
        var styles = (0, _transitionConfig.transitionConfigToCSS)(config[_part], className);
        partsTransition[_part] = {
          styles: styles,
          timeout: timeout,
          className: className
        };
      }

      var prevTransitionString = JSON.stringify(partsTransitionRef.current);
      var nextTransitionString = JSON.stringify(partsTransition);

      if (nextTransitionString !== prevTransitionString) {
        partsTransitionRef.current = partsTransition;
      }
    }

    return partsTransitionRef.current;
  }, [classNames, config, themeKey]);
}

var _createContext = (0, _utils.createContext)({
  errorMessage: "useTransitions: `context` is undefined or null. Seems you forgot to wrap the components within <TransitionsProvider />"
}),
    TransitionsProvider = _createContext[0],
    useTransitions = _createContext[1];

exports.useTransitions = useTransitions;
exports.TransitionsProvider = TransitionsProvider;
