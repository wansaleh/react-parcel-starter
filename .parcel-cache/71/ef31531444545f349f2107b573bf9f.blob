"use strict";

exports.__esModule = true;
exports.Slide = void 0;

var React = _interopRequireWildcard(require("react"));

var _utils = require("@chakra-ui/utils");

var _transition = require("./transition");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function createBaseStyle(placement) {
  switch (placement) {
    case "bottom":
      {
        return {
          maxWidth: "100vw",
          bottom: 0,
          left: 0,
          right: 0
        };
      }

    case "top":
      {
        return {
          maxWidth: "100vw",
          top: 0,
          left: 0,
          right: 0
        };
      }

    case "left":
      {
        return {
          width: "100%",
          height: "100vh",
          left: 0,
          top: 0
        };
      }

    case "right":
      {
        return {
          width: "100%",
          right: 0,
          top: 0,
          height: "100vh"
        };
      }

    default:
      break;
  }
}

var getTransformStyle = function getTransformStyle(placement, value) {
  var axis = "";
  if (placement === "left" || placement === "right") axis = "X";
  if (placement === "top" || placement === "bottom") axis = "Y";
  return "translate" + axis + "(" + value + ")";
};

function getTransitionStyles(placement) {
  var offset = {
    bottom: "100%",
    top: "-100%",
    left: "-100%",
    right: "100%"
  };
  return {
    init: {
      transform: getTransformStyle(placement, offset[placement])
    },
    entered: {
      transform: getTransformStyle(placement, "0%")
    },
    exiting: {
      transform: getTransformStyle(placement, offset[placement])
    }
  };
}

var Slide = function Slide(props) {
  var _props$placement = props.placement,
      placement = _props$placement === void 0 ? "left" : _props$placement,
      _props$timeout = props.timeout,
      timeout = _props$timeout === void 0 ? 150 : _props$timeout,
      children = props.children,
      rest = _objectWithoutPropertiesLoose(props, ["placement", "timeout", "children"]);

  var styles = getTransitionStyles(placement);

  var positionStyles = _extends({
    position: "fixed",
    willChange: "transform"
  }, createBaseStyle(placement));

  return /*#__PURE__*/React.createElement(_transition.Transition, _extends({
    styles: styles,
    transition: "opacity " + timeout + "ms cubic-bezier(0, 0, 0.2, 1), transform " + timeout + "ms cubic-bezier(0, 0, 0.2, 1)",
    timeout: {
      enter: 0,
      exit: timeout
    }
  }, rest), function (styles) {
    return children(_extends({}, positionStyles, styles));
  });
};

exports.Slide = Slide;

if (_utils.__DEV__) {
  Slide.displayName = "Slide";
}
