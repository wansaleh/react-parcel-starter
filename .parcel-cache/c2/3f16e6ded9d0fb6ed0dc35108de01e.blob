"use strict";

exports.__esModule = true;
exports.PopoverTransition = void 0;

var _transition = require("@chakra-ui/transition");

var _utils = require("@chakra-ui/utils");

var React = _interopRequireWildcard(require("react"));

var _popover = require("./popover");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var PopoverTransition = function PopoverTransition(props) {
  var children = props.children,
      styles = props.styles;
  var popover = (0, _popover.usePopoverContext)();
  var defaultStyles = {
    init: {
      opacity: 0.01,
      transform: "scale(0.9)",
      transitionTimingFunction: "cubic-bezier(0.4, 0, 0.2, 1)",
      transitionProperty: "opacity, transform",
      willChange: "opacity, transform"
    },
    entered: {
      opacity: 1,
      transitionDuration: "150ms",
      transform: "scale(1)"
    },
    exiting: {
      opacity: 0.01,
      transitionDuration: "150ms",
      transform: "scale(0.9)"
    }
  };
  return /*#__PURE__*/React.createElement(_transition.Transition, {
    onEnter: function onEnter(node) {
      node.hidden = false;
    },
    onExited: function onExited(node) {
      node.hidden = true;
      node.style.pointerEvents = "auto";
    },
    onExit: function onExit(node) {
      node.hidden = false;
    },
    onExiting: function onExiting(node) {
      node.style.pointerEvents = "none";
    },
    timeout: {
      enter: 0,
      exit: 150
    },
    "in": popover.isOpen,
    styles: styles != null ? styles : defaultStyles,
    unmountOnExit: false,
    children: children
  });
};

exports.PopoverTransition = PopoverTransition;

if (_utils.__DEV__) {
  PopoverTransition.displayName = "PopoverTransition";
}
