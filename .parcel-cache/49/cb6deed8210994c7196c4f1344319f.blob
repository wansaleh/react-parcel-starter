"use strict";

exports.__esModule = true;
exports.useFocusOnHide = useFocusOnHide;
exports.useFocusOnShow = useFocusOnShow;

var _hooks = require("@chakra-ui/hooks");

var _utils = require("@chakra-ui/utils");

var _react = require("react");

/**
 * Popover hook to manage the focus when the popover closes or hides.
 *
 * We either want to return focus back to the popover trigger or
 * let focus proceed normally if user moved to another interactive
 * element in the viewport.
 */
function useFocusOnHide(popoverRef, options) {
  var isFocusableRef = (0, _react.useRef)(false);
  var focusRef = options.focusRef,
      autoFocus = options.autoFocus,
      visible = options.visible,
      trigger = options.trigger;
  var shouldFocus = autoFocus && !visible && trigger === "click";

  var onPointerDown = function onPointerDown(event) {
    if (!options.visible) return;
    var target = event.target;
    var prevent = (0, _utils.isFocusable)(target) && target !== focusRef.current && !popoverRef.current.contains(target);

    if (prevent) {
      isFocusableRef.current = true;
    }
  };

  (0, _hooks.useEventListener)("mousedown", onPointerDown);
  (0, _hooks.useEventListener)("touchstart", onPointerDown);
  (0, _hooks.useUpdateEffect)(function () {
    return function () {
      if (!visible) {
        isFocusableRef.current = false;
      }
    };
  }, [visible]);
  /**
   * Using updateEffect here to allow effect to run only when
   * `options.visible` changes, not on mount
   */

  (0, _hooks.useUpdateEffect)(function () {
    if (!shouldFocus || !popoverRef.current) return;
    if (isFocusableRef.current) return;

    if (focusRef.current) {
      (0, _utils.focus)(focusRef.current);
    }
  }, [autoFocus, focusRef, visible, popoverRef, shouldFocus]);
}

/**
 * Popover hook to manage the focus when the popover opens.
 *
 * We either want to focus the popover content itself since it
 * has `tabIndex = -1`, or focus the first interactive element
 * within the popover content.
 */
function useFocusOnShow(popoverRef, options) {
  var visible = options.visible,
      autoFocus = options.autoFocus,
      focusRef = options.focusRef,
      trigger = options.trigger;
  /**
   * Using updateEffect here to allow effect to run only when
   * `options.visible` changes, not on mount
   */

  (0, _hooks.useUpdateEffect)(function () {
    if (trigger === "hover") return; // if `autoFocus` is false, move focus to the `PopoverContent`

    if (!autoFocus && popoverRef.current) {
      (0, _utils.focus)(popoverRef.current);
      return;
    }

    var shouldFocus = visible && autoFocus;
    if (!shouldFocus) return;

    if (focusRef == null ? void 0 : focusRef.current) {
      (0, _utils.focus)(focusRef.current);
      return;
    }

    if (popoverRef.current) {
      var firstTabbable = (0, _utils.getFirstTabbableIn)(popoverRef.current, true);
      (0, _utils.focus)(firstTabbable != null ? firstTabbable : popoverRef.current);
    }
  }, [visible, autoFocus, popoverRef, focusRef]);
}
