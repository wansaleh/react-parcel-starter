"use strict";

exports.__esModule = true;
exports.useWhyDidYouUpdate = useWhyDidYouUpdate;

var _react = require("react");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function useWhyDidYouUpdate(name, props) {
  // Get a mutable ref object where we can store props ...
  // ... for comparison next time this hook runs.
  var previousProps = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    if (previousProps.current) {
      // Get all keys from previous and current props
      var allKeys = Object.keys(_extends({}, previousProps.current, props)); // Use this object to keep track of changed props

      var changesObj = {}; // Iterate through keys

      allKeys.forEach(function (key) {
        // If previous is different from current
        if (previousProps.current[key] !== props[key]) {
          // Add to changesObj
          changesObj[key] = {
            from: previousProps.current[key],
            to: props[key]
          };
        }
      }); // If changesObj not empty then output to console

      if (Object.keys(changesObj).length) {
        console.log("[why-did-you-update]", name, changesObj);
      }
    } // Finally update previousProps with current props for next hook call


    previousProps.current = props;
  });
}
