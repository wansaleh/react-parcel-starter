"use strict";

exports.__esModule = true;
exports.FormErrorIcon = exports.FormErrorMessage = exports.FormHelperText = exports.RequiredIndicator = exports.FormLabel = exports.FormControl = exports.useFormControlContext = void 0;

var _hooks = require("@chakra-ui/hooks");

var _icon = require("@chakra-ui/icon");

var _system = require("@chakra-ui/system");

var _utils = require("@chakra-ui/utils");

var React = _interopRequireWildcard(require("react"));

var _useFormControl = require("./use-form-control");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var _createContext = (0, _utils.createContext)({
  strict: false,
  name: "FormControlContext"
}),
    FormControlProvider = _createContext[0],
    useFormControlContext = _createContext[1];

exports.useFormControlContext = useFormControlContext;

function useProvider(props) {
  var idProp = props.id,
      isRequired = props.isRequired,
      isInvalid = props.isInvalid,
      isDisabled = props.isDisabled,
      isLoading = props.isLoading,
      isReadOnly = props.isReadOnly,
      htmlProps = _objectWithoutPropertiesLoose(props, ["id", "isRequired", "isInvalid", "isDisabled", "isLoading", "isReadOnly"]); // Generate all the required ids


  var uuid = (0, _hooks.useId)();
  var id = idProp || "field-" + uuid;
  var labelId = id + "-label";
  var feedbackId = id + "-feedback";
  var helpTextId = id + "-helptext";
  /**
   * Track of when the `FormHelperText` has been rendered.
   * We use this to append it's id the the `aria-describedby` of the `input`
   */

  var _useBoolean = (0, _hooks.useBoolean)(),
      hasHelpText = _useBoolean[0],
      setHasHelpText = _useBoolean[1]; // Let's keep track of when we focus the form element (e.g, `input`)


  var _useBoolean2 = (0, _hooks.useBoolean)(),
      isFocused = _useBoolean2[0],
      setFocus = _useBoolean2[1];

  var context = {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isLoading: !!isLoading,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled,
    isFocused: !!isFocused,
    onFocus: setFocus.on,
    onBlur: setFocus.off,
    hasHelpText: hasHelpText,
    setHasHelpText: setHasHelpText,
    id: id,
    labelId: labelId,
    feedbackId: feedbackId,
    helpTextId: helpTextId,
    htmlProps: htmlProps
  };
  return context;
}

/**
 * FormControl provides context such as
 * `isInvalid`, `isDisabled`, and `isRequired` to form elements.
 *
 * This is commonly used in form elements such as `input`,
 * `select`, `textarea`, etc.
 */
var FormControl = /*#__PURE__*/(0, _system.forwardRef)(function FormControl(props, ref) {
  var styles = (0, _system.useMultiStyleConfig)("Form", props);
  var ownProps = (0, _system.omitThemingProps)(props);

  var _useProvider = useProvider(ownProps),
      htmlProps = _useProvider.htmlProps,
      context = _objectWithoutPropertiesLoose(_useProvider, ["htmlProps"]);

  var _className = (0, _utils.cx)("chakra-form-control", props.className);

  return /*#__PURE__*/React.createElement(FormControlProvider, {
    value: context
  }, /*#__PURE__*/React.createElement(_system.StylesProvider, {
    value: styles
  }, /*#__PURE__*/React.createElement(_system.chakra.div, _extends({
    role: "group",
    ref: ref
  }, htmlProps, {
    className: _className,
    __css: {
      width: "100%",
      position: "relative"
    }
  }))));
});
exports.FormControl = FormControl;

if (_utils.__DEV__) {
  FormControl.displayName = "FormControl";
}

/**
 * Used to enhance the usability of form controls.
 *
 * It is used to inform users as to what information
 * is requested for a form field.
 *
 * ♿️ Accessibility: Every form field should have a form label.
 */
var FormLabel = /*#__PURE__*/(0, _system.forwardRef)(function FormLabel(props, ref) {
  var styles = (0, _system.useStyleConfig)("FormLabel", props);

  var _omitThemingProps = (0, _system.omitThemingProps)(props),
      className = _omitThemingProps.className,
      children = _omitThemingProps.children,
      rest = _objectWithoutPropertiesLoose(_omitThemingProps, ["className", "children"]);

  var ownProps = (0, _useFormControl.useFormControlLabel)(rest);
  var field = useFormControlContext();
  return /*#__PURE__*/React.createElement(_system.chakra.label, _extends({
    ref: ref,
    className: (0, _utils.cx)("chakra-form__label", props.className),
    __css: _extends({
      display: "block",
      textAlign: "left"
    }, styles)
  }, ownProps), children, (field == null ? void 0 : field.isRequired) && /*#__PURE__*/React.createElement(RequiredIndicator, null));
});
exports.FormLabel = FormLabel;

if (_utils.__DEV__) {
  FormLabel.displayName = "FormLabel";
}

/**
 * Used to show a "required" text or an asterisks (*) to indicate that
 * a field is required.
 */
var RequiredIndicator = /*#__PURE__*/(0, _system.forwardRef)(function RequiredIndicator(props, ref) {
  var field = useFormControlContext();
  var styles = (0, _system.useStyles)();
  if (!(field == null ? void 0 : field.isRequired)) return null;

  var _className = (0, _utils.cx)("chakra-form__required-indicator", props.className);

  return /*#__PURE__*/React.createElement(_system.chakra.span, _extends({
    role: "presentation",
    "aria-hidden": true,
    ref: ref
  }, props, {
    __css: styles.requiredIndicator,
    className: _className,
    children: props.children || "*"
  }));
});
exports.RequiredIndicator = RequiredIndicator;

if (_utils.__DEV__) {
  RequiredIndicator.displayName = "RequiredIndicator";
}

/**
 * FormHelperText
 *
 * Assistive component that conveys additional guidance
 * about the field, such as how it will be used and what
 * types in values should be provided
 */
var FormHelperText = /*#__PURE__*/(0, _system.forwardRef)(function FormHelperText(props, ref) {
  var _props$id;

  var field = useFormControlContext();
  var styles = (0, _system.useStyles)();
  /**
   * Notify the field context when the help text is rendered on
   * screen, so we can apply the correct `aria-describedby` to the field (e.g. input, textarea)
   */

  (0, _hooks.useSafeLayoutEffect)(function () {
    field == null ? void 0 : field.setHasHelpText.on();
    return function () {
      return field == null ? void 0 : field.setHasHelpText.off();
    };
  }, []);

  var _className = (0, _utils.cx)("chakra-form__helper-text", props.className);

  return /*#__PURE__*/React.createElement(_system.chakra.div, _extends({
    ref: ref,
    __css: styles.helperText
  }, props, {
    className: _className,
    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.helpTextId
  }));
});
exports.FormHelperText = FormHelperText;

if (_utils.__DEV__) {
  FormHelperText.displayName = "FormHelperText";
}

/**
 * Used to provide feedback about an invalid input,
 * and suggest clear instrctions on how to fix it.
 */
var FormErrorMessage = /*#__PURE__*/(0, _system.forwardRef)(function FormErrorMessage(props, ref) {
  var _props$id2;

  var styles = (0, _system.useStyles)();
  var field = useFormControlContext();
  if (!(field == null ? void 0 : field.isInvalid)) return null;

  var _className = (0, _utils.cx)("chakra-form__error-message", props.className);

  return /*#__PURE__*/React.createElement(_system.chakra.div, _extends({
    "aria-live": "polite",
    ref: ref
  }, props, {
    __css: _extends({
      display: "flex",
      alignItems: "center"
    }, styles.errorText),
    className: _className,
    id: (_props$id2 = props.id) != null ? _props$id2 : field == null ? void 0 : field.feedbackId
  }));
});
exports.FormErrorMessage = FormErrorMessage;

if (_utils.__DEV__) {
  FormErrorMessage.displayName = "FormErrorMessage";
}
/**
 * Used as the visual indicator that a field is invalid or
 * a field has incorrect values.
 */


var FormErrorIcon = /*#__PURE__*/(0, _system.forwardRef)(function FormErrorIcon(props, ref) {
  var styles = (0, _system.useStyles)();
  var field = useFormControlContext();
  if (!(field == null ? void 0 : field.isInvalid)) return null;

  var _className = (0, _utils.cx)("chakra-form__error-icon", props.className);

  return /*#__PURE__*/React.createElement(_icon.Icon, _extends({
    ref: ref,
    "aria-hidden": true
  }, props, {
    __css: styles.errorIcon,
    className: _className
  }), /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
  }));
});
exports.FormErrorIcon = FormErrorIcon;

if (_utils.__DEV__) {
  FormErrorIcon.displayName = "FormErrorIcon";
}
