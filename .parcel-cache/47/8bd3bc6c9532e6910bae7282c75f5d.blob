"use strict";

exports.__esModule = true;
exports.useToast = useToast;
exports["default"] = void 0;

var _alert = require("@chakra-ui/alert");

var _closeButton = require("@chakra-ui/close-button");

var _system = require("@chakra-ui/system");

var _utils = require("@chakra-ui/utils");

var React = _interopRequireWildcard(require("react"));

var _toast = require("./toast.class");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Toast = function Toast(props) {
  var status = props.status,
      variant = props.variant,
      id = props.id,
      title = props.title,
      isClosable = props.isClosable,
      onClose = props.onClose,
      description = props.description;
  return /*#__PURE__*/React.createElement(_alert.Alert, {
    status: status,
    variant: variant,
    id: id,
    textAlign: "left",
    boxShadow: "lg",
    borderRadius: "md",
    alignItems: "start",
    margin: 2,
    paddingRight: 8
  }, /*#__PURE__*/React.createElement(_alert.AlertIcon, null), /*#__PURE__*/React.createElement(_system.chakra.div, {
    flex: "1"
  }, title && /*#__PURE__*/React.createElement(_alert.AlertTitle, null, title), description && /*#__PURE__*/React.createElement(_alert.AlertDescription, {
    marginTop: "px",
    lineHeight: "short"
  }, description)), isClosable && /*#__PURE__*/React.createElement(_closeButton.CloseButton, {
    size: "sm",
    onClick: onClose,
    position: "absolute",
    right: "4px",
    top: "4px"
  }));
};

var defaults = {
  duration: 5000,
  position: "bottom",
  variant: "solid"
};
/**
 * React hook used to create a function that can be used
 * to show toasts in an application.
 */

function useToast() {
  var theme = (0, _system.useTheme)();
  return React.useMemo(function () {
    var toastImpl = function toastImpl(options) {
      var render = options.render;

      var Message = function Message(props) {
        return /*#__PURE__*/React.createElement(_system.ThemeProvider, {
          theme: theme
        }, (0, _utils.isFunction)(render) ? render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, opts)));
      };

      var opts = (0, _utils.merge)({}, defaults, options);
      return _toast.toast.notify(Message, opts);
    };

    toastImpl.close = _toast.toast.close;
    toastImpl.closeAll = _toast.toast.closeAll; // toasts can only be updated if they have a valid id

    toastImpl.update = function (id, options) {
      var render = options.render,
          rest = _objectWithoutPropertiesLoose(options, ["render"]);

      if (!id) return;
      var opts = (0, _utils.merge)({}, defaults, rest);

      _toast.toast.update(id, _extends({}, opts, {
        message: function message(props) {
          return /*#__PURE__*/React.createElement(_system.ThemeProvider, {
            theme: theme
          }, (0, _utils.isFunction)(render) ? render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, opts)));
        }
      }));
    };

    toastImpl.isActive = _toast.toast.isActive;
    return toastImpl;
  }, [theme]);
}

var _default = useToast;
exports["default"] = _default;
