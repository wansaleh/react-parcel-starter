"use strict";

exports.__esModule = true;
exports.css = void 0;

var _utils = require("@chakra-ui/utils");

var _pseudo = require("./pseudo");

var _parser = require("./parser");

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var defaultBreakpoints = ["40em", "52em", "64em"];

function getBreakpoints(theme) {
  var _theme$breakpoints;

  var breakpoints = (_theme$breakpoints = theme == null ? void 0 : theme.breakpoints) != null ? _theme$breakpoints : defaultBreakpoints;
  return breakpoints;
}

var responsive = function responsive(styles) {
  return function (theme) {
    var computedStyles = {};
    var breakpoints = getBreakpoints(theme);
    var mediaQueries = [null].concat(breakpoints.map(function (n) {
      return "@media screen and (min-width: " + n + ")";
    }));

    for (var key in styles) {
      var value = (0, _utils.runIfFn)(styles[key], theme != null ? theme : {});
      if (value == null) continue;
      value = (0, _utils.isResponsiveObjectLike)(value) ? (0, _utils.objectToArrayNotation)(value) : value;

      if (!(0, _utils.isArray)(value)) {
        computedStyles[key] = value;
        continue;
      }

      var queries = value.slice(0, mediaQueries.length).length;

      for (var index = 0; index < queries; index++) {
        var media = mediaQueries[index];

        if (!media) {
          computedStyles[key] = value[index];
          continue;
        }

        computedStyles[media] = computedStyles[media] || {};
        if (value[index] == null) continue;
        computedStyles[media][key] = value[index];
      }
    }

    return computedStyles;
  };
};

var css = function css(args) {
  if (args === void 0) {
    args = {};
  }

  return function (props) {
    if (props === void 0) {
      props = {};
    }

    var theme = "theme" in props ? props.theme : props;
    var computedStyles = {};
    var styleObject = (0, _utils.runIfFn)(args, theme);
    var styles = responsive(styleObject)(theme);

    for (var k in styles) {
      var _config$transform;

      var x = styles[k];
      var key = k in _pseudo.pseudoSelectors ? _pseudo.pseudoSelectors[k] : k;
      var val = (0, _utils.runIfFn)(x, theme);
      var config = _parser.parser.config[key];

      if (key === "apply") {
        var apply = css((0, _utils.get)(theme, val))(theme);
        computedStyles = (0, _utils.merge)({}, computedStyles, apply);
        continue;
      }

      if ((0, _utils.isObject)(val)) {
        computedStyles[key] = css(val)(theme);
        continue;
      }

      var scale = (0, _utils.get)(theme, config == null ? void 0 : config.scale, {});
      var value = (_config$transform = config == null ? void 0 : config.transform == null ? void 0 : config.transform(val, scale)) != null ? _config$transform : (0, _utils.get)(scale, val, val);

      if (config == null ? void 0 : config.properties) {
        for (var _iterator = _createForOfIteratorHelperLoose(config == null ? void 0 : config.properties), _step; !(_step = _iterator()).done;) {
          var p = _step.value;
          computedStyles[p] = value;
        }

        continue;
      }

      if (config == null ? void 0 : config.property) {
        computedStyles[config == null ? void 0 : config.property] = value;
        continue;
      }

      computedStyles[key] = value;
    }

    return computedStyles;
  };
};

exports.css = css;
